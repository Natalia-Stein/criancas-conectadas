declare var beforeAll: jest.Lifecycle;
declare var beforeEach: jest.Lifecycle;
declare var afterAll: jest.Lifecycle;
declare var afterEach: jest.Lifecycle;
declare var describe: jest.Describe;
declare var fdescribe: jest.Describe;
declare var xdescribe: jest.Describe;
declare var it: jest.It;
declare var fit: jest.It;
declare var xit: jest.It;
declare var test: jest.It;
declare var xtest: jest.It;

declare const expect: jest.Expect;

// Remove once https://github.com/microsoft/TypeScript/issues/53255 is fixed.
type ExtractEachCallbackArgs<T extends readonly any[]> = {
    1: [T[0]];
    2: [T[0], T[1]];
    3: [T[0], T[1], T[2]];
    4: [T[0], T[1], T[2], T[3]];
    5: [T[0], T[1], T[2], T[3], T[4]];
    6: [T[0], T[1], T[2], T[3], T[4], T[5]];
    7: [T[0], T[1], T[2], T[3], T[4], T[5], T[6]];
    8: [T[0], T[1], T[2], T[3], T[4], T[5], T[6], T[7]];
    9: [T[0], T[1], T[2], T[3], T[4], T[5], T[6], T[7], T[8]];
    10: [T[0], T[1], T[2], T[3], T[4], T[5], T[6], T[7], T[8], T[9]];
    fallback: Array<T extends ReadonlyArray<infer U> ? U : any>;
}[
    T extends Readonly<[any]> ? 1
        : T extends Readonly<[any, any]> ? 2
        : T extends Readonly<[any, any, any]> ? 3
        : T extends Readonly<[any, any, any, any]> ? 4
        : T extends Readonly<[any, any, any, any, any]> ? 5
        : T extends Readonly<[any, any, any, any, any, any]> ? 6
        : T extends Readonly<[any, any, any, any, any, any, any]> ? 7
        : T extends Readonly<[any, any, any, any, any, any, any, any]> ? 8
        : T extends Readonly<[any, any, any, any, any, any, any, any, any]> ? 9
        : T extends Readonly<[any, any, any, any, any, any, any, any, any, any]> ? 10
        : "fallback"
];

type FakeableAPI =
    | "Date"
    | "hrtime"
    | "nextTick"
    | "performance"
    | "queueMicrotask"
    | "requestAnimationFrame"
    | "cancelAnimationFrame"
    | "requestIdleCallback"
    | "cancelIdleCallback"
    | "setImmediate"
    | "clearImmediate"
    | "setInterval"
    | "clearInterval"
    | "setTimeout"
    | "clearTimeout";

interface FakeTimersConfig {
    /**
     * If set to `true` all timers will be advanced automatically
     * by 20 milliseconds every 20 milliseconds. A custom time delta
     * may be provided by passing a number.
     *
     * @defaultValue
     * The default is `false`.
     */
    advanceTimers?: boolean | number;
    /**
     * List of names of APIs (e.g. `Date`, `nextTick()`, `setImmediate()`,
     * `setTimeout()`) that should not be faked.
     *
     * @defaultValue
     * The default is `[]`, meaning all APIs are faked.
     */
    doNotFake?: FakeableAPI[];
    /**
     * Sets current system time to be used by fake timers.
     *
     * @defaultValue
     * The default is `Date.now()`.
     */
    now?: number | Date;
    /**
     * The maximum number of recursive timers that will be run when calling
     * `jest.runAllTimers()`.
     *
     * @defaultValue
     * The default is `100_000` timers.
     */
    timerLimit?: number;
    /**
     * Use the old fake timers implementation instead of one backed by
     * [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).
     *
     * @defaultValue
     * The default is `false`.
     */
    legacyFakeTimers?: false;
}

interface LegacyFakeTimersConfig {
    /**
     * Use the old fake timers implementation instead of one backed by
     * [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).
     *
     * @defaultValue
     * The default is `false`.
     */
    legacyFakeTimers?: true;
}

declare namespace jest {
    /**
     * Disables automatic mocking in the module loader.
     */
    function autoMockOff(): typeof jest;
    /**
     * Enables automatic mocking in the module loader.
     */
    function autoMockOn(): typeof jest;
    /**
     * Clears the mock.calls and mock.instances properties of all mocks.
     * Equivalent to calling .mockClear() on every mocked function.
     */
    function clearAllMocks(): typeof jest;
    /**
     * Use the automatic mocking system to generate a mocked version of the given module.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    function createMockFromModule<T>(moduleName: string): T;
    /**
     * Resets the state of all mocks.
     * Equivalent to calling .mockReset() on every mocked function.
     */
    function resetAllMocks(): typeof jest;
    /**
     * Restores all mocks and replaced properties back to their original value.
     * Equivalent to calling `.mockRestore()` on every mocked function
     * and `.restore()` on every replaced property.
     *
     * Beware that `jest.restoreAllMocks()` only works when the mock was created
     * with `jest.spyOn()`; other mocks will require you to manually restore them.
     */
    function restoreAllMocks(): typeof jest;
    /**
     * Removes any pending timers from the timer system. If any timers have
     * been scheduled, they will be cleared and will never have the opportunity
     * to execute in the future.
     */
    function clearAllTimers(): void;
    /**
     * Returns the number of fake timers still left to run.
     */
    function getTimerCount(): number;
    /**
     * Set the current system time used by fake timers. Simulates a user
     * changing the system clock while your program is running. It affects the
     * current time but it does not in itself cause e.g. timers to fire; they
     * will fire exactly as they would have done without the call to
     * jest.setSystemTime().
     *
     * > Note: This function is only available when using modern fake timers
     * > implementation
     */
    function setSystemTime(now?: number | Date): void;
    /**
     * When mocking time, Date.now() will also be mocked. If you for some
     * reason need access to the real current time, you can invoke this
     * function.
     *
     * > Note: This function is only available when using modern fake timers
     * > implementation
     */
    function getRealSystemTime(): number;
    /**
     * Retrieves the seed value. It will be randomly generated for each test run
     * or can be manually set via the `--seed` CLI argument.
     */
    function getSeed(): number;
    /**
     * Returns the current time in ms of the fake timer clock.
     */
    function now(): number;
    /**
     * Indicates that the module system should never return a mocked version
     * of the specified module, including all of the specified module's dependencies.
     */
    function deepUnmock(moduleName: string): typeof jest;
    /**
     * Disables automatic mocking in the module loader.
     */
    function disableAutomock(): typeof jest;
    /**
     * Mocks a module with an auto-mocked version when it is being required.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    function doMock<T = unknown>(moduleName: string, factory?: () => T, options?: MockOptions): typeof jest;
    /**
     * Indicates that the module system should never return a mocked version
     * of the specified module from require() (e.g. that it should always return the real module).
     */
    function dontMock(moduleName: string): typeof jest;
    /**
     * Enables automatic mocking in the module loader.
     */
    function enableAutomock(): typeof jest;
    /**
     * Creates a mock function. Optionally takes a mock implementation.
     */
    function fn(): Mock;
    /**
     * Creates a mock function. Optionally takes a mock implementation.
     */
    function fn<T, Y extends any[], C = any>(implementation?: (this: C, ...args: Y) => T): Mock<T, Y, C>;
    /**
     * (renamed to `createMockFromModule` in Jest 26.0.0+)
     * Use the automatic mocking system to generate a mocked version of the given module.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    function genMockFromModule<T>(moduleName: string): T;
    /**
     * Returns `true` if test environment has been torn down.
     *
     * @example
     *
     * if (jest.isEnvironmentTornDown()) {
     *   // The Jest environment has been torn down, so stop doing work
     *   return;
     * }
     */
    function isEnvironmentTornDown(): boolean;
    /**
     * Returns whether the given function is a mock function.
     */
    function isMockFunction(fn: any): fn is Mock;
    /**
     * Mocks a module with an auto-mocked version when it is being required.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    function mock<T = unknown>(moduleName: string, factory?: () => T, options?: MockOptions): typeof jest;
    /**
     * Wraps types of the `source` object and its deep members with type definitions
     * of Jest mock function. Pass `{shallow: true}` option to disable the deeply
     * mocked behavior.
     */
    function mocked<T>(source: T, options?: { shallow: false }): MaybeMockedDeep<T>;
    /**
     * Wraps types of the `source` object with type definitions of Jest mock function.
     */
    function mocked<T>(source: T, options: { shallow: true }): MaybeMocked<T>;
    /**
     * Returns the actual module instead of a mock, bypassing all checks on
     * whether the module should receive a mock implementation or not.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    function requireActual<TModule extends {} = any>(moduleName: string): TModule;
    /**
     * Returns a mock module instead of the actual module, bypassing all checks
     * on whether the module should be required normally or not.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    function requireMock<TModule extends {} = any>(moduleName: string): TModule;
    /**
     * Resets the module registry - the cache of all required modules. This is
     * useful to isolate modules where local state might conflict between tests.
     */
    function resetModules(): typeof jest;
    /**
     * Creates a sandbox registry for the modules that are loaded inside the callback function.
     * This is useful to isolate specific modules for every test so that local module state doesn't conflict between tests.
     */
    function isolateModules(fn: () => void): typeof jest;
    /**
     * Equivalent of `jest.isolateModules()` for async functions to be wrapped.
     * The caller is expected to `await` the completion of `jest.isolateModulesAsync()`.
     */
    function isolateModulesAsync(fn: () => Promise<void>): Promise<void>;
    /**
     * Runs failed tests n-times until they pass or until the max number of retries is exhausted.
     * This only works with jest-circus!
     */
    function retryTimes(numRetries: number, options?: { logErrorsBeforeRetry?: boolean }): typeof jest;
    /**
     * Replaces property on an object with another value.
     *
     * @remarks
     * For mocking functions, and 'get' or 'set' accessors, use `jest.spyOn()` instead.
     */
    function replaceProperty<T extends object, K extends keyof T>(obj: T, key: K, value: T[K]): ReplaceProperty<T[K]>;
    /**
     * Exhausts tasks queued by `setImmediate()`.
     *
     * @remarks
     * This function is only available when using legacy fake timers implementation.
     */
    function runAllImmediates(): void;
    /**
     * Exhausts the micro-task queue (i.e., tasks in Node.js scheduled with `process.nextTick()`).
     */
    function runAllTicks(): void;
    /**
     * Exhausts both the macro-task queue (i.e., tasks queued by `setTimeout()`, `setInterval()`
     * and `setImmediate()`) and the micro-task queue (i.e., tasks in Node.js scheduled with
     * `process.nextTick()`).
     */
    function runAllTimers(): void;
    /**
     * Asynchronous equivalent of `jest.runAllTimers()`. It also yields to the event loop,
     * allowing any scheduled promise callbacks to execute _before_ running the timers.
     *
     * @remarks
     * Not available when using legacy fake timers implementation.
     */
    function runAllTimersAsync(): Promise<void>;
    /**
     * Executes only the macro-tasks that are currently pending (i.e., only the tasks that
     * have been queued by `setTimeout()`, `setInterval()` and `setImmediate()` up to this point).
     */
    function runOnlyPendingTimers(): void;
    /**
     * Asynchronous equivalent of `jest.runOnlyPendingTimers()